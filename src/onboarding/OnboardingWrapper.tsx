/**
 * Onboarding Wrapper Component
 * Manages onboarding flow state and routing logic
 * 
 * AZ: Onboarding axƒ±n idar…ô√ßiliyi v…ô y√∂nl…ôndirm…ô
 * EN: Onboarding flow management and routing
 * RU: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
 */

import React, { useState, useEffect } from 'react';
import { OnboardingScreen } from './OnboardingScreen';
import { getHasSeenOnboarding } from '../storage/onboardingStorage';

interface OnboardingWrapperProps {
  /** Children to render after onboarding / Onboardingd…ôn sonra g√∂st…ôril…ôc…ôk m…ôzmun */
  children: React.ReactNode;
  
  /** Current language / Cari dil */
  language?: 'az' | 'en' | 'ru';
  
  /** Dark mode / Qaranlƒ±q rejim */
  isDark?: boolean;
  
  /** 
   * TEST MODE: Always show onboarding (ignore localStorage)
   * TEST REJIMI: H…ômi≈ü…ô onboarding g√∂st…ôr (localStorage-ƒ± n…ôz…ôr…ô alma)
   * 
   * VACIB: Production-da bu FALSE olmalƒ±dƒ±r!
   * IMPORTANT: Set to FALSE in production!
   * 
   * true = H…ôr d…ôf…ô onboarding g√∂st…ôrilir (test √º√ß√ºn)
   * false = 1 d…ôf…ô g√∂st…ôrilir (real istifad…ô)
   */
  testMode?: boolean;
  
  /** Loading component / Y√ºkl…ôm…ô komponenti */
  loadingComponent?: React.ReactNode;
}

/**
 * Onboarding Wrapper
 * Shows onboarding on first launch, then main app content
 * 
 * AZ: ƒ∞lk a√ßƒ±lƒ±≈üda onboarding, sonra …ôsas t…ôtbiq
 */
export function OnboardingWrapper({
  children,
  language = 'az',
  isDark = false,
  testMode = false, // ‚Üê TEST REJIMI: Production-da FALSE edin!
  loadingComponent = <div className="min-h-screen flex items-center justify-center">Loading...</div>,
}: OnboardingWrapperProps) {
  const [hasSeenOnboarding, setHasSeenOnboarding] = useState<boolean | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Check onboarding status on mount
  // AZ: Komponent y√ºkl…ôndikd…ô onboarding statusunu yoxla
  useEffect(() => {
    async function checkOnboardingStatus() {
      try {
        // TEST MODE: H…ômi≈ü…ô false qaytar (h…ôr d…ôf…ô g√∂st…ôr)
        // PRODUCTION: localStorage-dan oxu (1 d…ôf…ô g√∂st…ôr)
        if (testMode) {
          console.log('üß™ TEST MODE: Onboarding h…ôr d…ôf…ô g√∂st…ôril…ôc…ôk');
          setHasSeenOnboarding(false);
        } else {
          const hasSeen = await getHasSeenOnboarding();
          setHasSeenOnboarding(hasSeen);
        }
      } catch (error) {
        console.error('Error checking onboarding status:', error);
        setHasSeenOnboarding(false);
      } finally {
        setIsLoading(false);
      }
    }
    
    checkOnboardingStatus();
  }, [testMode]);

  // Handle onboarding completion
  // AZ: Onboarding tamamlanmasƒ±nƒ± idar…ô et
  const handleComplete = () => {
    // TEST MODE-da localStorage-a yazmƒ±rƒ±q (n√∂vb…ôti d…ôf…ô yen…ô g√∂st…ôrilsin)
    // PRODUCTION-da yazƒ±rƒ±q (1 d…ôf…ô g√∂st…ôrilsin)
    if (!testMode) {
      setHasSeenOnboarding(true);
    } else {
      console.log('üß™ TEST MODE: localStorage-a yazƒ±lmadƒ± (n√∂vb…ôti d…ôf…ô yen…ô g√∂st…ôril…ôc…ôk)');
      setHasSeenOnboarding(true); // UI update √º√ß√ºn
    }
  };

  // Handle onboarding skip
  // AZ: Onboarding ke√ßm…ôni idar…ô et
  const handleSkip = () => {
    // TEST MODE-da localStorage-a yazmƒ±rƒ±q
    // PRODUCTION-da yazƒ±rƒ±q
    if (!testMode) {
      setHasSeenOnboarding(true);
    } else {
      console.log('üß™ TEST MODE: Skip edildi, amma n√∂vb…ôti d…ôf…ô yen…ô g√∂st…ôril…ôc…ôk');
      setHasSeenOnboarding(true); // UI update √º√ß√ºn
    }
  };

  // Show loading state
  // AZ: Y√ºkl…ôm…ô v…ôziyy…ôtini g√∂st…ôr
  if (isLoading) {
    return <>{loadingComponent}</>;
  }

  // Show onboarding if not seen (or test mode)
  // AZ: G√∂r√ºnm…ôyibs…ô (v…ô ya test rejimi) onboarding g√∂st…ôr
  if (!hasSeenOnboarding) {
    return (
      <OnboardingScreen
        onComplete={handleComplete}
        onSkip={handleSkip}
        language={language}
        isDark={isDark}
      />
    );
  }

  // Show main app content
  // AZ: ∆èsas t…ôtbiq m…ôzmununu g√∂st…ôr
  return <>{children}</>;
}

/**
 * Create root navigator based on onboarding and auth state
 * AZ: Onboarding v…ô auth v…ôziyy…ôtin…ô …ôsas…ôn k√∂k naviqator yarat
 */
export function createRootNavigator(
  hasSeenOnboarding: boolean,
  isAuthenticated: boolean
): 'onboarding' | 'auth' | 'app' {
  if (!hasSeenOnboarding) {
    return 'onboarding';
  }
  
  if (!isAuthenticated) {
    return 'auth';
  }
  
  return 'app';
}
